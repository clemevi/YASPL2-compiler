

import java_cup.runtime.*;



class Lexer implements java_cup.runtime.Scanner {

  
  public static final int YYEOF = -1;

  
  private static final int ZZ_BUFFERSIZE = 16384;

  
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\45"+
    "\2\0\1\51\1\43\1\0\1\35\1\36\1\5\1\47\1\30\1\40"+
    "\1\11\1\4\1\6\11\7\1\32\1\21\1\37\1\46\1\41\2\0"+
    "\1\56\3\10\1\52\1\54\5\10\1\57\2\10\1\53\5\10\1\60"+
    "\1\55\4\10\1\0\1\50\4\0\1\14\1\24\1\10\1\15\1\13"+
    "\1\31\1\10\1\12\1\22\2\10\1\26\1\10\1\23\1\25\2\10"+
    "\1\20\1\16\1\17\1\27\1\10\1\42\3\10\1\33\1\44\1\34"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\6\6\1\7"+
    "\3\6\1\10\1\6\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\6\2\1\1\21\1\22\1\23"+
    "\1\1\1\24\1\25\1\26\1\2\2\0\3\6\1\27"+
    "\4\6\1\30\3\6\1\31\1\32\1\33\1\34\1\6"+
    "\1\35\1\36\1\37\1\0\1\40\1\41\1\42\1\43"+
    "\2\0\1\44\2\6\1\45\4\6\1\46\1\47\3\6"+
    "\3\0\1\50\1\51\2\6\1\52\1\53\1\54\2\6"+
    "\1\0\1\6\1\55\1\56\1\57\1\0\1\60\3\0"+
    "\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       
    int j = offset;  
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\304\0\142\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\142"+
    "\0\u027d\0\u02ae\0\u02df\0\142\0\u0310\0\142\0\142\0\142"+
    "\0\142\0\142\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\142\0\u0467\0\142\0\u0498\0\u04c9\0\142\0\u04fa\0\u052b"+
    "\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0157\0\u0746\0\u0777\0\u07a8\0\142\0\142"+
    "\0\142\0\142\0\u07d9\0\142\0\142\0\142\0\u080a\0\142"+
    "\0\142\0\142\0\142\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0157\0\u0930\0\u0961\0\u0992\0\u09c3\0\u0157\0\u0157\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u089d\0\u0157\0\u0157\0\u0ae9"+
    "\0\u0b1a\0\u0157\0\u0157\0\u0157\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0157\0\u0157\0\u0157\0\u0c0f\0\u0157\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  
    int j = offset;  
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\12\1\15\1\16\1\17\1\12"+
    "\1\20\1\21\1\22\1\23\3\12\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\3\1\44\7\12"+
    "\1\45\1\4\1\5\42\45\1\46\2\45\1\47\10\45"+
    "\63\0\1\5\62\0\1\50\1\51\64\0\1\52\55\0"+
    "\2\11\1\0\1\52\55\0\3\12\1\0\7\12\1\0"+
    "\6\12\1\0\1\12\10\0\1\12\7\0\7\12\6\0"+
    "\3\12\1\0\1\12\1\53\5\12\1\0\6\12\1\0"+
    "\1\12\10\0\1\12\7\0\7\12\6\0\3\12\1\0"+
    "\7\12\1\0\4\12\1\54\1\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\1\12\1\55"+
    "\5\12\1\0\3\12\1\56\2\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\5\12\1\57"+
    "\1\12\1\0\6\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\6\0\3\12\1\0\1\60\5\12\1\61\1\0"+
    "\6\12\1\0\1\12\10\0\1\12\7\0\7\12\6\0"+
    "\3\12\1\0\7\12\1\0\1\12\1\62\4\12\1\0"+
    "\1\63\10\0\1\12\7\0\7\12\6\0\3\12\1\0"+
    "\7\12\1\0\3\12\1\64\2\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\7\12\1\0"+
    "\3\12\1\65\2\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\6\0\3\12\1\0\2\12\1\66\4\12\1\0"+
    "\6\12\1\0\1\12\10\0\1\12\7\0\7\12\40\0"+
    "\1\67\5\0\1\70\53\0\1\71\65\0\1\72\20\0"+
    "\3\12\1\0\1\73\6\12\1\0\6\12\1\0\1\12"+
    "\10\0\1\12\7\0\7\12\43\0\1\74\61\0\1\75"+
    "\62\0\1\76\64\0\1\77\6\0\1\45\2\0\42\45"+
    "\1\0\2\45\1\0\10\45\17\0\1\100\1\101\2\0"+
    "\1\102\21\0\1\103\13\0\1\50\1\4\1\5\56\50"+
    "\5\104\1\105\53\104\6\0\2\106\57\0\3\12\1\0"+
    "\2\12\1\107\4\12\1\0\6\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\4\12\1\110"+
    "\2\12\1\0\6\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\6\0\3\12\1\0\7\12\1\0\6\12\1\0"+
    "\1\111\10\0\1\12\7\0\7\12\6\0\3\12\1\0"+
    "\7\12\1\0\5\12\1\112\1\0\1\12\10\0\1\12"+
    "\7\0\7\12\6\0\3\12\1\0\2\12\1\113\4\12"+
    "\1\0\6\12\1\0\1\12\10\0\1\12\7\0\7\12"+
    "\6\0\3\12\1\0\1\12\1\114\5\12\1\0\6\12"+
    "\1\0\1\12\10\0\1\12\7\0\7\12\6\0\3\12"+
    "\1\0\7\12\1\0\5\12\1\115\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\5\12\1\116"+
    "\1\12\1\0\6\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\6\0\3\12\1\0\5\12\1\117\1\12\1\0"+
    "\6\12\1\0\1\12\10\0\1\12\7\0\7\12\6\0"+
    "\3\12\1\0\7\12\1\0\3\12\1\120\2\12\1\0"+
    "\1\12\10\0\1\12\7\0\7\12\6\0\3\12\1\0"+
    "\7\12\1\0\4\12\1\121\1\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\7\12\1\0"+
    "\1\122\5\12\1\0\1\12\10\0\1\12\7\0\7\12"+
    "\53\0\1\123\5\0\5\104\1\124\53\104\4\0\1\5"+
    "\1\105\61\0\1\125\1\106\57\0\3\12\1\0\3\12"+
    "\1\126\3\12\1\0\6\12\1\0\1\12\10\0\1\12"+
    "\7\0\7\12\6\0\3\12\1\0\1\12\1\127\5\12"+
    "\1\0\6\12\1\0\1\12\10\0\1\12\7\0\7\12"+
    "\6\0\3\12\1\0\7\12\1\0\2\12\1\130\3\12"+
    "\1\0\1\12\10\0\1\12\7\0\7\12\6\0\3\12"+
    "\1\0\6\12\1\131\1\0\6\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\7\12\1\0"+
    "\1\12\1\132\4\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\6\0\3\12\1\0\1\12\1\133\5\12\1\0"+
    "\6\12\1\0\1\12\10\0\1\12\7\0\7\12\6\0"+
    "\3\12\1\0\7\12\1\0\4\12\1\134\1\12\1\0"+
    "\1\12\10\0\1\12\7\0\7\12\6\0\3\12\1\0"+
    "\4\12\1\135\2\12\1\0\6\12\1\0\1\12\10\0"+
    "\1\12\7\0\7\12\6\0\3\12\1\0\7\12\1\0"+
    "\4\12\1\136\1\12\1\0\1\12\10\0\1\12\7\0"+
    "\7\12\54\0\1\137\4\0\4\104\1\5\1\124\53\104"+
    "\6\0\3\12\1\0\7\12\1\0\4\12\1\140\1\12"+
    "\1\0\1\12\10\0\1\12\7\0\7\12\6\0\3\12"+
    "\1\0\5\12\1\141\1\12\1\0\6\12\1\0\1\12"+
    "\10\0\1\12\7\0\7\12\6\0\3\12\1\0\1\12"+
    "\1\142\5\12\1\0\6\12\1\0\1\12\10\0\1\12"+
    "\7\0\7\12\6\0\3\12\1\0\1\12\1\143\5\12"+
    "\1\0\6\12\1\0\1\12\10\0\1\12\7\0\7\12"+
    "\55\0\1\144\11\0\3\12\1\0\1\12\1\145\5\12"+
    "\1\0\6\12\1\0\1\12\10\0\1\12\7\0\7\12"+
    "\56\0\1\146\61\0\1\147\61\0\1\150\52\0\1\151"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3283];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       
    int j = offset;  
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\10\1\1\11"+
    "\3\1\1\11\1\1\5\11\6\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\2\0\14\1\4\11\1\1\3\11"+
    "\1\0\4\11\2\0\15\1\3\0\11\1\1\0\4\1"+
    "\1\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       
    int j = offset;  
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  
  private java.io.Reader zzReader;

  
  private int zzState;

  
  private int zzLexicalState = YYINITIAL;

  
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  
  private int zzMarkedPos;

  
  private int zzCurrentPos;

  
  private int zzStartRead;

  
  private int zzEndRead;

  
  private int yyline;

  
  private int yychar;

  
  private int yycolumn;

  
  private boolean zzAtBOL = true;

  
  private boolean zzAtEOF;

  
  private boolean zzEOFDone;
  
  
  private int zzFinalHighSurrogate = 0;

  
public YASPL2Sym sym;

StringBuffer string = new StringBuffer();
private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}

private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}



  
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  
    int j = 0;  
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  
  private boolean zzRefill() throws java.io.IOException {

    
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      
      return false;
    }

    
    return true;
  }

    
  
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            
    zzEndRead = zzStartRead;  

    if (zzReader != null)
      zzReader.close();
  }


  
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  
  public final int yystate() {
    return zzLexicalState;
  }


  
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
yytext()+"> col: " + yycolumn + " row: " + yyline  );
            }
          case 50: break;
          case 2: 
            { 
            }
          case 51: break;
          case 3: 
            { return symbol(sym.DIV);
            }
          case 52: break;
          case 4: 
            { return symbol(sym.TIMES);
            }
          case 53: break;
          case 5: 
            { return symbol(sym.INT_CONST,yytext());
            }
          case 54: break;
          case 6: 
            { return symbol(sym.NAME,yytext());
            }
          case 55: break;
          case 7: 
            { return symbol(sym.SEMI);
            }
          case 56: break;
          case 8: 
            { return symbol(sym.COMMA);
            }
          case 57: break;
          case 9: 
            { return symbol(sym.COLON);
            }
          case 58: break;
          case 10: 
            { return symbol(sym.LGPAR);
            }
          case 59: break;
          case 11: 
            { return symbol(sym.RGPAR);
            }
          case 60: break;
          case 12: 
            { return symbol(sym.LPAR);
            }
          case 61: break;
          case 13: 
            { return symbol(sym.RPAR);
            }
          case 62: break;
          case 14: 
            { return symbol(sym.LT);
            }
          case 63: break;
          case 15: 
            { return symbol(sym.MINUS);
            }
          case 64: break;
          case 16: 
            { return symbol(sym.GT);
            }
          case 65: break;
          case 17: 
            { string.setLength(0); yybegin(STRING);
            }
          case 66: break;
          case 18: 
            { return symbol(sym.ASSIGN);
            }
          case 67: break;
          case 19: 
            { return symbol(sym.PLUS);
            }
          case 68: break;
          case 20: 
            { string.append( yytext() );
            }
          case 69: break;
          case 21: 
            { yybegin(YYINITIAL);
return symbol(sym.STRING_CONST,
string.toString());
            }
          case 70: break;
          case 22: 
            { string.append('\\');
            }
          case 71: break;
          case 23: 
            { return symbol(sym.DO);
            }
          case 72: break;
          case 24: 
            { return symbol(sym.IF);
            }
          case 73: break;
          case 25: 
            { return symbol(sym.READ);
            }
          case 74: break;
          case 26: 
            { return symbol(sym.LE);
            }
          case 75: break;
          case 27: 
            { return symbol(sym.WRITE);
            }
          case 76: break;
          case 28: 
            { return symbol(sym.GE);
            }
          case 77: break;
          case 29: 
            { return symbol(sym.AND);
            }
          case 78: break;
          case 30: 
            { return symbol(sym.OR);
            }
          case 79: break;
          case 31: 
            { return symbol(sym.EQ);
            }
          case 80: break;
          case 32: 
            { string.append('\t');
            }
          case 81: break;
          case 33: 
            { string.append('\r');
            }
          case 82: break;
          case 34: 
            { string.append('\n');
            }
          case 83: break;
          case 35: 
            { string.append('\"');
            }
          case 84: break;
          case 36: 
            { return symbol(sym.DOUBLE_CONST,yytext());
            }
          case 85: break;
          case 37: 
            { return symbol(sym.DEF);
            }
          case 86: break;
          case 38: 
            { return symbol(sym.INT);
            }
          case 87: break;
          case 39: 
            { return symbol(sym.NOT);
            }
          case 88: break;
          case 40: 
            { return symbol(sym.HEAD);
            }
          case 89: break;
          case 41: 
            { return symbol(sym.ELSE);
            }
          case 90: break;
          case 42: 
            { return symbol(sym.THEN);
            }
          case 91: break;
          case 43: 
            { return symbol(sym.TRUE);
            }
          case 92: break;
          case 44: 
            { return symbol(sym.BOOL);
            }
          case 93: break;
          case 45: 
            { return symbol(sym.START);
            }
          case 94: break;
          case 46: 
            { return symbol(sym.FALSE);
            }
          case 95: break;
          case 47: 
            { return symbol(sym.WHILE);
            }
          case 96: break;
          case 48: 
            { return symbol(sym.DOUBLE);
            }
          case 97: break;
          case 49: 
            { return null;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
