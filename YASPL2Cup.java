
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.Lexer;
import java_cup.runtime.*;
import java_cup.runtime.Scanner;
import com.scalified.tree.*;
import com.scalified.tree.multinode.*;
import java.util.*;
import Visitor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YASPL2Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YASPL2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YASPL2Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YASPL2Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YASPL2Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\006\000\002\002\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\002\000\002\014\004" +
    "\000\002\014\003\000\002\003\005\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\026\005\000\002" +
    "\026\003\000\002\027\005\000\002\027\003\000\002\004" +
    "\012\000\002\015\004\000\002\015\002\000\002\016\004" +
    "\000\002\016\003\000\002\005\007\000\002\006\006\000" +
    "\002\017\003\000\002\017\003\000\002\007\006\000\002" +
    "\007\005\000\002\007\006\000\002\007\006\000\002\007" +
    "\011\000\002\007\013\000\002\007\011\000\002\007\011" +
    "\000\002\007\021\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\020\003\000\002\021\005\000\002" +
    "\021\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\003\000\002\010\004\000\002\010\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\011\005\000\002\011\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\024" +
    "\003\000\002\024\003\000\002\012\003\000\002\012\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\004\005\001\002\000\004\002\221\001" +
    "\002\000\014\005\ufffd\010\010\026\015\027\013\030\007" +
    "\001\002\000\004\011\067\001\002\000\010\006\ufff7\007" +
    "\ufff7\011\ufff7\001\002\000\004\011\201\001\002\000\014" +
    "\005\ufffd\010\010\026\015\027\013\030\007\001\002\000" +
    "\004\005\017\001\002\000\010\006\ufff8\007\ufff8\011\ufff8" +
    "\001\002\000\014\005\ufffd\010\010\026\015\027\013\030" +
    "\007\001\002\000\010\006\ufff9\007\ufff9\011\ufff9\001\002" +
    "\000\004\005\uffff\001\002\000\026\011\037\012\030\015" +
    "\022\017\024\020\040\021\027\023\020\036\031\040\021" +
    "\043\023\001\002\000\014\011\050\012\030\017\024\020" +
    "\040\023\020\001\002\000\004\012\171\001\002\000\034" +
    "\011\ufff0\012\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\023" +
    "\ufff0\026\015\027\013\030\007\036\ufff0\040\ufff0\043\ufff0" +
    "\001\002\000\004\012\146\001\002\000\042\006\uffda\007" +
    "\uffda\013\uffda\014\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\032\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\052" +
    "\uffda\053\uffda\001\002\000\016\007\144\022\053\023\055" +
    "\024\057\025\056\032\uffde\001\002\000\032\002\uffea\011" +
    "\uffea\012\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\023\uffea\036\uffea\040\uffea\043\uffea\001\002\000\006\007" +
    "\142\032\uffdd\001\002\000\014\011\050\012\030\017\024" +
    "\020\040\023\020\001\002\000\004\012\104\001\002\000" +
    "\004\032\102\001\002\000\032\002\uffeb\011\uffeb\012\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\023\uffeb\036" +
    "\uffeb\040\uffeb\043\uffeb\001\002\000\032\002\ufffb\011\037" +
    "\012\030\015\022\016\ufffb\017\024\020\040\021\027\023" +
    "\020\036\031\040\021\043\023\001\002\000\004\002\001" +
    "\001\002\000\004\031\073\001\002\000\024\007\041\012" +
    "\042\022\uffd7\023\uffd7\024\uffd7\025\uffd7\031\ufff5\032\uffd7" +
    "\035\043\001\002\000\042\006\uffd9\007\uffd9\013\uffd9\014" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\032\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\004\011\067\001\002\000\014\011\050\012\030" +
    "\017\024\020\040\023\020\001\002\000\020\011\050\012" +
    "\030\017\024\020\040\023\020\033\045\034\047\001\002" +
    "\000\014\006\054\022\053\023\055\024\057\025\056\001" +
    "\002\000\012\006\uffc9\013\uffc9\052\uffc9\053\uffc9\001\002" +
    "\000\004\006\051\001\002\000\012\006\uffc8\013\uffc8\052" +
    "\uffc8\053\uffc8\001\002\000\042\006\uffd7\007\uffd7\013\uffd7" +
    "\014\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\032\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053\uffd7" +
    "\001\002\000\032\002\uffe6\011\uffe6\012\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\023\uffe6\036\uffe6\040\uffe6" +
    "\043\uffe6\001\002\000\014\011\050\012\030\017\024\020" +
    "\040\023\020\001\002\000\014\011\uffd4\012\uffd4\017\uffd4" +
    "\020\uffd4\023\uffd4\001\002\000\032\002\uffe7\011\uffe7\012" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7" +
    "\036\uffe7\040\uffe7\043\uffe7\001\002\000\014\011\uffd3\012" +
    "\uffd3\017\uffd3\020\uffd3\023\uffd3\001\002\000\014\011\uffd1" +
    "\012\uffd1\017\uffd1\020\uffd1\023\uffd1\001\002\000\014\011" +
    "\uffd2\012\uffd2\017\uffd2\020\uffd2\023\uffd2\001\002\000\042" +
    "\006\uffd8\007\uffd8\013\uffd8\014\uffd8\022\053\023\055\024" +
    "\057\025\056\032\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\053\uffd8\001\002\000\004\014\065\001" +
    "\002\000\016\007\063\014\uffdb\022\053\023\055\024\057" +
    "\025\056\001\002\000\014\011\050\012\030\017\024\020" +
    "\040\023\020\001\002\000\004\014\uffdc\001\002\000\004" +
    "\011\067\001\002\000\004\013\070\001\002\000\012\006" +
    "\ufff5\007\041\013\ufff5\031\ufff5\001\002\000\004\006\071" +
    "\001\002\000\032\002\uffe5\011\uffe5\012\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\023\uffe5\036\uffe5\040\uffe5" +
    "\043\uffe5\001\002\000\010\006\ufff6\013\ufff6\031\ufff6\001" +
    "\002\000\010\026\015\027\013\030\007\001\002\000\006" +
    "\006\ufff3\007\077\001\002\000\004\006\076\001\002\000" +
    "\032\002\uffe9\011\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\023\uffe9\036\uffe9\040\uffe9\043\uffe9\001" +
    "\002\000\010\026\015\027\013\030\007\001\002\000\004" +
    "\006\ufff4\001\002\000\006\002\ufffc\016\ufffc\001\002\000" +
    "\004\006\103\001\002\000\032\002\uffe8\011\uffe8\012\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\036" +
    "\uffe8\040\uffe8\043\uffe8\001\002\000\022\011\050\012\106" +
    "\017\024\020\040\023\020\033\045\034\047\051\111\001" +
    "\002\000\024\022\053\023\055\024\057\025\056\044\135" +
    "\045\131\046\137\047\134\050\133\001\002\000\022\011" +
    "\050\012\106\017\024\020\040\023\020\033\045\034\047" +
    "\051\111\001\002\000\010\013\117\052\113\053\115\001" +
    "\002\000\012\006\uffcc\013\uffcc\052\uffcc\053\uffcc\001\002" +
    "\000\022\011\050\012\106\017\024\020\040\023\020\033" +
    "\045\034\047\051\111\001\002\000\012\006\uffcf\013\uffcf" +
    "\052\113\053\115\001\002\000\022\011\uffcb\012\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\033\uffcb\034\uffcb\051\uffcb\001\002" +
    "\000\022\011\050\012\106\017\024\020\040\023\020\033" +
    "\045\034\047\051\111\001\002\000\022\011\uffca\012\uffca" +
    "\017\uffca\020\uffca\023\uffca\033\uffca\034\uffca\051\uffca\001" +
    "\002\000\012\006\uffd0\013\uffd0\052\113\053\115\001\002" +
    "\000\004\037\120\001\002\000\004\015\022\001\002\000" +
    "\006\006\123\042\122\001\002\000\004\015\022\001\002" +
    "\000\032\002\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\023\uffe3\036\uffe3\040\uffe3\043\uffe3" +
    "\001\002\000\004\006\125\001\002\000\032\002\uffe4\011" +
    "\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\023\uffe4\036\uffe4\040\uffe4\043\uffe4\001\002\000\026\013" +
    "\136\022\053\023\055\024\057\025\056\044\135\045\131" +
    "\046\137\047\134\050\133\001\002\000\010\013\130\052" +
    "\113\053\115\001\002\000\012\006\uffcd\013\uffcd\052\uffcd" +
    "\053\uffcd\001\002\000\014\011\uffc6\012\uffc6\017\uffc6\020" +
    "\uffc6\023\uffc6\001\002\000\014\011\050\012\030\017\024" +
    "\020\040\023\020\001\002\000\014\011\uffc3\012\uffc3\017" +
    "\uffc3\020\uffc3\023\uffc3\001\002\000\014\011\uffc4\012\uffc4" +
    "\017\uffc4\020\uffc4\023\uffc4\001\002\000\014\011\uffc7\012" +
    "\uffc7\017\uffc7\020\uffc7\023\uffc7\001\002\000\042\006\uffd5" +
    "\007\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\032\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\052\uffd5\053\uffd5\001\002\000\014\011\uffc5\012\uffc5\017" +
    "\uffc5\020\uffc5\023\uffc5\001\002\000\022\006\uffce\013\uffce" +
    "\022\053\023\055\024\057\025\056\052\uffce\053\uffce\001" +
    "\002\000\014\013\136\022\053\023\055\024\057\025\056" +
    "\001\002\000\016\011\050\012\030\017\024\020\040\021" +
    "\027\023\020\001\002\000\004\032\uffdf\001\002\000\016" +
    "\011\050\012\030\017\024\020\040\021\027\023\020\001" +
    "\002\000\004\032\uffe0\001\002\000\004\011\147\001\002" +
    "\000\004\035\150\001\002\000\014\011\050\012\030\017" +
    "\024\020\040\023\020\001\002\000\014\006\152\022\053" +
    "\023\055\024\057\025\056\001\002\000\022\011\050\012" +
    "\106\017\024\020\040\023\020\033\045\034\047\051\111" +
    "\001\002\000\010\006\154\052\113\053\115\001\002\000" +
    "\004\011\155\001\002\000\004\035\156\001\002\000\014" +
    "\011\050\012\030\017\024\020\040\023\020\001\002\000" +
    "\014\006\160\022\053\023\055\024\057\025\056\001\002" +
    "\000\004\013\161\001\002\000\004\015\022\001\002\000" +
    "\004\006\163\001\002\000\032\002\uffe1\011\uffe1\012\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\036" +
    "\uffe1\040\uffe1\043\uffe1\001\002\000\026\011\037\012\030" +
    "\015\022\017\024\020\040\021\027\023\020\036\031\040" +
    "\021\043\023\001\002\000\036\011\ufff0\012\ufff0\013\ufff0" +
    "\015\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\026\015\027" +
    "\013\030\007\036\ufff0\040\ufff0\043\ufff0\001\002\000\030" +
    "\011\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\023\ufff1\036\ufff1\040\ufff1\043\ufff1\001\002\000\004" +
    "\016\170\001\002\000\036\002\uffec\006\uffec\011\uffec\012" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\023\uffec" +
    "\036\uffec\040\uffec\042\uffec\043\uffec\001\002\000\022\011" +
    "\050\012\106\017\024\020\040\023\020\033\045\034\047" +
    "\051\111\001\002\000\010\013\173\052\113\053\115\001" +
    "\002\000\004\041\174\001\002\000\004\015\022\001\002" +
    "\000\004\006\176\001\002\000\032\002\uffe2\011\uffe2\012" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\036\uffe2\040\uffe2\043\uffe2\001\002\000\042\006\uffd6\007" +
    "\uffd6\013\uffd6\014\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\032\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052" +
    "\uffd6\053\uffd6\001\002\000\004\005\ufffe\001\002\000\004" +
    "\012\202\001\002\000\012\013\ufff0\026\015\027\013\030" +
    "\007\001\002\000\004\013\204\001\002\000\004\014\205" +
    "\001\002\000\010\026\015\027\013\030\007\001\002\000" +
    "\004\015\211\001\002\000\012\015\uffee\026\015\027\013" +
    "\030\007\001\002\000\004\015\uffef\001\002\000\034\011" +
    "\ufff0\012\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0" +
    "\026\015\027\013\030\007\036\ufff0\040\ufff0\043\ufff0\001" +
    "\002\000\014\005\ufff2\010\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\001\002\000\026\011\037\012\030\015\022\017\024\020" +
    "\040\021\027\023\020\036\031\040\021\043\023\001\002" +
    "\000\004\016\215\001\002\000\004\006\216\001\002\000" +
    "\014\005\uffed\010\uffed\026\uffed\027\uffed\030\uffed\001\002" +
    "\000\004\006\220\001\002\000\042\005\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\015\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\023\ufffa\026\ufffa\027\ufffa\030\ufffa\036\ufffa\040\ufffa\043" +
    "\ufffa\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\013\004\010\013\011\022\005\001\001\000\004" +
    "\026\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\013\004\010\013\177\022\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\013\004\010\013" +
    "\015\022\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\032\007\025\010\024\014\034\017\033\020" +
    "\031\026\035\001\001\000\004\010\176\001\001\000\002" +
    "\001\001\000\010\003\164\015\163\022\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\032\007\025\010\024\014\100\017\033\020" +
    "\031\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\071\001" +
    "\001\000\006\010\061\021\060\001\001\000\006\010\043" +
    "\012\045\001\001\000\004\023\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\051\001\001\000\002\001" +
    "\001\000\004\023\051\001\001\000\006\010\061\021\063" +
    "\001\001\000\002\001\001\000\004\026\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\073\027\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\073\027\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\104\011\106\012\107\001\001\000\006\023\051\025" +
    "\131\001\001\000\010\010\125\011\126\012\107\001\001" +
    "\000\004\024\113\001\001\000\002\001\001\000\010\010" +
    "\104\011\111\012\107\001\001\000\004\024\113\001\001" +
    "\000\002\001\001\000\010\010\104\011\115\012\107\001" +
    "\001\000\002\001\001\000\004\024\113\001\001\000\002" +
    "\001\001\000\004\006\120\001\001\000\002\001\001\000" +
    "\004\006\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\051\025\131\001\001\000" +
    "\004\024\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\051\001\001\000\004\023\051\001\001\000" +
    "\006\010\024\020\142\001\001\000\002\001\001\000\006" +
    "\010\024\020\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\150\001\001\000\004" +
    "\023\051\001\001\000\010\010\104\011\152\012\107\001" +
    "\001\000\004\024\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\156\001\001\000\004\023\051\001" +
    "\001\000\002\001\001\000\004\006\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\032\007\025\010" +
    "\024\014\166\017\033\020\031\026\035\001\001\000\010" +
    "\003\164\015\165\022\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\104\011\171" +
    "\012\107\001\001\000\004\024\113\001\001\000\002\001" +
    "\001\000\004\006\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\164\015\202\022\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\206\016" +
    "\205\022\005\001\001\000\004\005\211\001\001\000\010" +
    "\003\206\016\207\022\005\001\001\000\002\001\001\000" +
    "\010\003\164\015\212\022\005\001\001\000\002\001\001" +
    "\000\020\006\032\007\025\010\024\014\213\017\033\020" +
    "\031\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YASPL2Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YASPL2Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YASPL2Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
   
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }



    
    Scanner s;
     YASPL2Cup(Scanner s, String k){ this.s=s; }

   public VisitableNode<String> makeNode(String name, VisitableNode<String> ... childrens){

           VisitableNode<String> toReturn = new VisitableNode<String>(name);

           for(int i = 0; i < childrens.length; i ++){
               toReturn.add(childrens[i]);
           }

           return toReturn;
       }

	public void print(String x){
			System.out.println(x);
	}

     public VisitableNode<String> makeNode(String name, ArrayList<VisitableNode<String>> childrens){

               VisitableNode<String> toReturn = new VisitableNode<String>(name);

                for (VisitableNode<String> node : childrens)
                   toReturn.add(node);

               return toReturn;
           }

            public void syntax_error(Symbol cur_token){
            /*recupera riga e colonna dell'errore*/
            int row = cur_token.left+1;
            int col = cur_token.right;
            String message = "L'errore si trova in riga "+ row +" e in colonna "+col+" su token: "+this.symbl_name_from_id(cur_token.sym)+"\nToken Expected: ";
            //System.out.println("L'errore si trova in riga "+ row +" e in colonna "+col+" su token: "+this.symbl_name_from_id(cur_token.sym));
            //System.out.println("Token expeted:");
            for(int i=0;i<this.expected_token_ids().size();i++)
            	message+=this.symbl_name_from_id(this.expected_token_ids().get(i))+ "  ";
				
				//System.out.println(this.symbl_name_from_id(this.expected_token_ids().get(i)));
			
				report_error(message, null);
				this.done_parsing();
				

			 }

			public void report_error(String message, Object info){
			
				 System.out.println("ERRORE: "+ message );
				 
			}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YASPL2Cup$actions {
  private final YASPL2Cup parser;

  /** Constructor */
  CUP$YASPL2Cup$actions(YASPL2Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action_part00000000(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YASPL2Cup$result;

      /* select the action based on the action number */
      switch (CUP$YASPL2Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= HEAD Decls START Statments 
            {
              VisitableNode<String> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		ArrayList<VisitableNode<String>> ds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 VisitableNode<String> Program_node = new VisitableNode<String>("PROGRAM_NODE",  ds, sts);
														 
														 	RESULT = Program_node;
														 	NodeVisitor visitor = new NodeVisitor();
                                        					visitor.visit( RESULT);
															System.out.println("INIZIO CONTROLLO SEMANTICO");
							                       	  		if(!visitor.SemanticAnalysis(RESULT)) System.out.println("Errore: " + visitor.Error);
															else {
															visitor.saveSource(visitor.getCode(RESULT));
														 	visitor.saveFileXML();
                                        				 	System.out.println("Albero costruito correttamente, vedi file.xml"); 
															}

														
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> start_val = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		RESULT = start_val;
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YASPL2Cup$parser.done_parsing();
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= Var_decl Decls 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> v = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> ds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> decls_list = new ArrayList<VisitableNode<String>>();  
												decls_list.add( v);
												decls_list.addAll( ds);
												RESULT = decls_list;
										
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= Def_decl Decls 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> d = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> ds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> decls_list = new ArrayList<VisitableNode<String>>();  
												decls_list.add( d);
												decls_list.addAll( ds);
												RESULT = decls_list;
										
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		 RESULT = new ArrayList<VisitableNode<String>>(); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statments ::= Stat Statments 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		ArrayList<VisitableNode<String>> s = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ( sts).addAll( s); RESULT =  sts; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Statments",10, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statments ::= Stat 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> s = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> Stat_list = new ArrayList<VisitableNode<String>>(); 
								Stat_list.addAll( s);
								RESULT = Stat_list;  
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Statments",10, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var_decl ::= Type Vars SEMI 
            {
              VisitableNode<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Vector<String> vs = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 
												
											ArrayList<VisitableNode<String>> childrens = new ArrayList<VisitableNode<String>>();
											VisitableNode<String> root = makeNode("VAR_DECL_NODE", makeNode(t.toString()));
											
																							
												for (int i=0;i<vs.size(); i++) {
													VisitableNode<String> tmp = new VisitableNode<String>("VAR_NODE");
													VisitableNode<String> tmp2 = new VisitableNode<String>("ID_NODE", vs.get(i));
													tmp.add(tmp2);
													childrens.add(tmp); 
												}		
												for (int i=0;i<vs.size()-1;i++) {
													childrens.get(i).add(childrens.get(i+1));
												}
												root.add(childrens.get(0));
												root.setLexem(String.valueOf(vs.size()));
												RESULT = root;
												
										
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Var_decl",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT="Integer"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT="Boolean"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= DOUBLE 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT="Double"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Type",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Vars ::= NAME COMMA Vars 
            {
              Vector<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Vector<String> vs = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 Vector<String> x = new Vector<String>(vs);
    									 x.add(n.toString());  RESULT = x; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Vars ::= NAME 
            {
              Vector<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  Vector<String> x = new Vector<String>(); x.add(n.toString());  RESULT = x; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Types ::= Type COMMA Types 
            {
              Vector<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Vector<String> ts = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 Vector<String> x = new Vector<String>(ts);
    									 x.add(t.toString()); RESULT = x; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Types",21, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Types ::= Type 
            {
              Vector<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  Vector<String> x = new Vector<String>(); x.add(t.toString()); RESULT = x; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Types",21, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Def_decl ::= DEF NAME LPAR Var_decls RPAR COLON Par_decls Body 
            {
              VisitableNode<String> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		ArrayList<VisitableNode<String>> vds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		ArrayList<VisitableNode<String>> pds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> b = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  VisitableNode<String> ProcDecl_node = new VisitableNode<String>("PROC_DECL_NODE",  vds,  pds); 
																							  ProcDecl_node.setLexem(n.toString());
																							  ProcDecl_node.add(new VisitableNode<String>("ID_NODE",n.toString()));
																							  ProcDecl_node.add( b);
																							  RESULT = ProcDecl_node;

																						
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Def_decl",2, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Var_decls ::= Var_decl Var_decls 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> vd = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> vds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 	ArrayList<VisitableNode<String>> var_decl_list = new ArrayList<VisitableNode<String>>();  
												var_decl_list.add( vd);
												var_decl_list.addAll( vds);
												RESULT = var_decl_list;
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",11, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Var_decls ::= 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		 RESULT = new ArrayList<VisitableNode<String>>(); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Var_decls",11, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Par_decls ::= Var_decl Par_decls 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> vd = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> pds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
			ArrayList<VisitableNode<String>> var_decl_list = new ArrayList<VisitableNode<String>>();  
												(vd).setData("PAR_DECLS");
												var_decl_list.add( vd);
												var_decl_list.addAll( pds);
												RESULT = var_decl_list;	
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Par_decls",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Par_decls ::= Var_decl 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> vd = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> par_decl_list = new ArrayList<VisitableNode<String>>();  
									(vd).setData("PAR_DECLS");
									 par_decl_list.add( vd);
									 RESULT = par_decl_list; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Par_decls",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Body ::= LGPAR Var_decls Statments RGPAR SEMI 
            {
              VisitableNode<String> RESULT =null;
		int lgpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int lgpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Object lgp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		ArrayList<VisitableNode<String>> vds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		ArrayList<VisitableNode<String>> sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int rgpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int rgpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object rgp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 if(vds.isEmpty()) 
																				RESULT = new VisitableNode<String>("BODY_NODE", sts);  
																			else 
																				RESULT = new VisitableNode<String>("BODY_NODE", vds,  sts);
																			
																		 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Body",3, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comp_stat ::= LGPAR Var_decls Statments RGPAR 
            {
              VisitableNode<String> RESULT =null;
		int lgpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int lgpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object lgp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		ArrayList<VisitableNode<String>> vds = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		ArrayList<VisitableNode<String>> sts = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int rgpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int rgpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object rgp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		if(vds.isEmpty()) 
																				RESULT = new VisitableNode<String>("COMP_STAT_NODE", sts);  
																			else {
																				RESULT = new VisitableNode<String>("COMP_STAT_NODE", vds,  sts);
																				
																			} 
																
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Comp_stat",4, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stat ::= Comp_stat 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> cs = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> cs_list = new ArrayList<VisitableNode<String>>(); cs_list.add( cs); RESULT = cs_list ; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stat ::= Simple_stat 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> ss = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> ss_list = new ArrayList<VisitableNode<String>>(); ss_list.add( ss); RESULT = ss_list ; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Simple_stat ::= Vars READ Types SEMI 
            {
              VisitableNode<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Vector<String> v = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Vector<String> t = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 if(v.size() != t.size()) { report_fatal_error("Syntax Error-> Invalid READ operation before row "+ cur_token.left +" -> "+v.toString()+"READ"+t.toString(),null); }
												  ArrayList<VisitableNode<String>> id_list = new ArrayList<VisitableNode<String>>();
												  ArrayList<VisitableNode<String>> type_list = new ArrayList<VisitableNode<String>>();
												  for(int i = 0; i<v.size(); i++){
												  	id_list.add( new VisitableNode("ID_NODE",v.get(i)));
												  	type_list.add( makeNode(t.get(i)));
												  }
												VisitableNode<String> Read_OP_node = new VisitableNode<String>("READ_OP_NODE",id_list,type_list);  
												RESULT = Read_OP_node;
												
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Simple_stat ::= Out_values WRITE SEMI 
            {
              VisitableNode<String> RESULT =null;
		int ovleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int ovright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		ArrayList<VisitableNode<String>> ov = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 VisitableNode<String> Write_OP_node = new VisitableNode<String>("WRITE_OP_NODE",  ov);  
														RESULT = Write_OP_node;
													
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Simple_stat ::= NAME ASSIGN Expr SEMI 
            {
              VisitableNode<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 VisitableNode<String> id_node = new VisitableNode<String>("ID_NODE",n.toString());
														VisitableNode<String> ee = e;  
														RESULT = makeNode("ASSIGN_NODE",id_node, ee);
														
													
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Simple_stat ::= NAME ASSIGN BOOL_CONST SEMI 
            {
              VisitableNode<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> bc = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 VisitableNode<String> id_node = new VisitableNode<String>("ID_NODE",n.toString());
														    	RESULT = makeNode("ASSIGN_NODE",id_node, bc);
														
													
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Simple_stat ::= NAME LPAR Exprs COLON Vars RPAR SEMI 
            {
              VisitableNode<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		ArrayList<VisitableNode<String>> es = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Vector<String> vs = (Vector<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		   
																				  
																				  ArrayList<VisitableNode<String>> id_list = new ArrayList<VisitableNode<String>>();
												  								  for(int i = 0; i<vs.size(); i++){
												  	 								id_list.add( new VisitableNode("ID_NODE",vs.get(i)));
												  										}
																				  VisitableNode<String> CALL_OP_node = new VisitableNode<String>("CALL_OP_NODE",id_list, es);  
																				  CALL_OP_node.add(	new VisitableNode<String>("ID_NODE",n.toString()));
																				  CALL_OP_node.setLexem(n.toString());
																				  RESULT = CALL_OP_node;
																			
																				
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat ELSE Comp_stat SEMI 
            {
              VisitableNode<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int cs1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		VisitableNode<String> cs1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> cs2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
			RESULT = makeNode("IFTHENELSE_NODE",be,cs1,cs2); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Simple_stat ::= IF LPAR Bool_expr RPAR THEN Comp_stat SEMI 
            {
              VisitableNode<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> cs = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = makeNode("IFTHEN_NODE",be,cs); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Simple_stat ::= WHILE LPAR Bool_expr RPAR DO Comp_stat SEMI 
            {
              VisitableNode<String> RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> cs = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = makeNode("WHILE_NODE",be,cs); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Simple_stat ::= FOR LPAR NAME ASSIGN Expr SEMI Bool_expr SEMI NAME ASSIGN Expr SEMI RPAR Comp_stat SEMI 
            {
              VisitableNode<String> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-14)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-14)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-14)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-13)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-13)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-13)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-12)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-12)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-12)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-11)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-10)).right;
		VisitableNode<String> e1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-10)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		VisitableNode<String> e2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> cs = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 
																						VisitableNode<String> id_node1 = new VisitableNode<String>("ID_NODE",n1.toString());
																						VisitableNode<String> assign1 = makeNode("ASSIGN_NODE",id_node1, e1);
																						VisitableNode<String> id_node2 = new VisitableNode<String>("ID_NODE",n2.toString());
																						VisitableNode<String> assign2 = makeNode("ASSIGN_NODE",id_node2, e2);
																						RESULT = makeNode("FOR_NODE",assign1,be,assign2,cs); 
																						
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Simple_stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-14)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Out_values ::= Expr COMMA Out_values 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> ovs = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ( ovs).add( e); RESULT =  ovs; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Out_values ::= STRING_CONST COMMA Out_values 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> ovs = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ( ovs).add(new VisitableNode<String>("STRING_CONST",sc.toString())); RESULT =  ovs;   
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Out_values ::= Expr 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> outvalues_list = new ArrayList<VisitableNode<String>>(); 
								outvalues_list.add(e);
								RESULT = outvalues_list; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Out_values ::= STRING_CONST 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> outvalues_list = new ArrayList<VisitableNode<String>>(); 
										outvalues_list.add(new VisitableNode<String>("STRING_CONST",sc.toString()));
										RESULT = outvalues_list; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		ArrayList<VisitableNode<String>> es = (ArrayList<VisitableNode<String>>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  ( es).add( e); RESULT =  es; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exprs ::= Expr 
            {
              ArrayList<VisitableNode<String>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 ArrayList<VisitableNode<String>> Exprs_list = new ArrayList<VisitableNode<String>>(); 
								Exprs_list.add(e);
								RESULT = Exprs_list; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Exprs",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= INT_CONST 
            {
              VisitableNode<String> RESULT =null;
		int icleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object ic = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT =  new VisitableNode<String>("INT_CONST", ic.toString()); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= DOUBLE_CONST 
            {
              VisitableNode<String> RESULT =null;
		int dcleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new VisitableNode<String>("DOUBLE_CONST", dc.toString()); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= Expr Arith_op Expr 
            {
              VisitableNode<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		VisitableNode<String> e1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String ao = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> e2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 
													    switch (ao.toString()) {
																case "+":
																	 RESULT = makeNode("ADD_NODE", e1, e2);
																	 RESULT.setLexem("+");
																	break;
																
																case "-":
																	 RESULT = makeNode("MINUS_NODE", e1, e2);
																	 RESULT.setLexem("-");
																	break;
																
																case "*":
																	 RESULT = makeNode("MUL_NODE", e1, e2);
																	 RESULT.setLexem("*");
																	break;
																
																case "/":
																	 RESULT = makeNode("DIV_NODE", e1, e2);
																	 RESULT.setLexem("/");
																	break;
														
																default:
																	 
																	break;
																}
													
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= NAME 
            {
              VisitableNode<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new VisitableNode<String>("ID_NODE", n.toString()); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= MINUS Expr 
            {
              VisitableNode<String> RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = makeNode("UMINUS_NODE", e); RESULT.setLexem("-"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= LPAR Expr RPAR 
            {
              VisitableNode<String> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> e = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = e; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Expr",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Arith_op ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Arith_op ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Arith_op ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Arith_op ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bool_expr ::= Bool_expr Bool_op Bool_expr 
            {
              VisitableNode<String> RESULT =null;
		int be1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int be1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		VisitableNode<String> be1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> be2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 if(bo=="and"){
																RESULT = makeNode("AND_NODE",  be1,  be2);
																RESULT.setLexem("&&");
															}else {
																RESULT = makeNode("OR_NODE", be1, be2);  
															    RESULT.setLexem("||");
															}
														 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_expr",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Bool_expr ::= NOT Bool_expr 
            {
              VisitableNode<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  RESULT = makeNode("NOT_NODE",  be); RESULT.setLexem("!"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_expr",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool_expr ::= Expr Rel_op Expr 
            {
              VisitableNode<String> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		VisitableNode<String> e1 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int roleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> e2 = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		  switch (ro.toString()) {
																case ">":
																	 RESULT = makeNode("GT_NODE", e1, e2);
																	 RESULT.setLexem(">");
																	 break;
																case "<":
																	 RESULT = makeNode("LT_NODE", e1, e2);
																	 RESULT.setLexem("<");
																	 break;
																
																case ">=":
																	 RESULT = makeNode("GE_NODE", e1, e2);
																	 RESULT.setLexem(">=");
																	 break;
																
																case "<=":
																	 RESULT = makeNode("LE_NODE", e1, e2);
																	 RESULT.setLexem("<=");
																	 break;
																	
																case "==":
																	 RESULT = makeNode("EQ_NODE", e1, e2);
																	 RESULT.setLexem("==");
																	 break;
																	 
																default:
																	 
																	break;
																}  
																
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_expr",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool_expr ::= LPAR Bool_expr RPAR 
            {
              VisitableNode<String> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		VisitableNode<String> be = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = be; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_expr",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool_expr ::= BOOL_CONST 
            {
              VisitableNode<String> RESULT =null;
		int bcleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		VisitableNode<String> bc = (VisitableNode<String>)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = bc; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_expr",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool_op ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_op",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool_op ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Bool_op",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BOOL_CONST ::= TRUE 
            {
              VisitableNode<String> RESULT =null;
		 RESULT = makeNode("TRUE"); RESULT.setLexem("1"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("BOOL_CONST",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BOOL_CONST ::= FALSE 
            {
              VisitableNode<String> RESULT =null;
		 RESULT = makeNode("FALSE"); RESULT.setLexem("0"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("BOOL_CONST",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Rel_op ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Rel_op ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Rel_op ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Rel_op ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Rel_op ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("Rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YASPL2Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
              return CUP$YASPL2Cup$do_action_part00000000(
                               CUP$YASPL2Cup$act_num,
                               CUP$YASPL2Cup$parser,
                               CUP$YASPL2Cup$stack,
                               CUP$YASPL2Cup$top);
    }
}

}
